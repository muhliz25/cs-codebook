using System;
using System.Runtime.InteropServices;

...

/* Deklaration benötigter API-Funktionen, -Konstanten und -Strukturen */
[DllImport("shell32.dll", CharSet=CharSet.Auto)]
static extern int SHFileOperation(ref SHFILEOPSTRUCT fileOp);

private const int FO_MOVE = 0x0001;            // Verschieben
private const int FOF_ALLOWUNDO  = 0x0040;     // Undo ermöglichen
private const int FOF_NOCONFIRMATION = 0x0010; // Keine Nachfrage

[StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
   public struct SHFILEOPSTRUCT
{
   public IntPtr hwnd; 
   public int wFunc;
   public string pFrom;
   public string pTo;
   public short fFlags; 
   [MarshalAs(UnmanagedType.Bool)]    
   public bool fAnyOperationsAborted; 
   public IntPtr hNameMappings; 
   public string lpszProgressTitle; 
}

/* Methode zum Verschieben */
public static bool APIMove(string source, string dest, bool confirmOverwrites)
{
   // Struktur für die Dateiinformationen erzeugen
   SHFILEOPSTRUCT fileOp = new SHFILEOPSTRUCT();

   // (Unter-)Funktion definieren (ShFileOperation kann auch Dateien und 
   // Ordner löschen und kopieren)
   fileOp.wFunc = FO_MOVE;

   // Quelle und Ziel definieren. Dabei müssen mehrere Datei- oder
   // Ordnerangaben über 0-Zeichen getrennt werden.
   // Am Ende muss ein zusätzliches 0-Zeichen stehen
   fileOp.pFrom = source + "\x0\x0";
   fileOp.pTo = dest + "\x0\x0";

   // Flags setzen, sodass ein Rückgängigmachen möglich ist (was aber
   // beim Verschieben zurzeit scheinbar noch nicht unterstützt wird!)
   // und - je nach Argument confirmOverwrites - keine Nachfrage
   // beim Überschreiben von Ordnern beim Anwender erfolgt
   if (confirmOverwrites) 
      fileOp.fFlags = FOF_ALLOWUNDO;
   else
      fileOp.fFlags = FOF_ALLOWUNDO | FOF_NOCONFIRMATION;

   // SHFileOperation unter Übergabe der Struktur aufrufen
   int result = SHFileOperation(ref fileOp);

   // Erfolg oder Misserfolg zurückgeben
   return (result == 0);
}
