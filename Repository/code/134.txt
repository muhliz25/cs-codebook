using System;
using System.IO;
using System.Xml;
using System.Xml.Schema;
using System.Collections;

...

/* Klasse zum Validieren von XML-Dokumenten */
public class XmlValidator
{
   /* Eigenschaften zum Speichern von Fehlern und Warnungen */
   public ArrayList Errors; 
   public ArrayList Warnings; 

   /* Aufzählung für den Rückgabetyp */
   public enum XmlValidatorResult
   {
      Valid,         // Das Dokument ist gültig
      ErrorsExists,  // Es sind Fehler aufgetreten
      WarningsExists // Es sind Warnungen gemeldet worden 
   }

   /* Konstruktor */
   public XmlValidator()
   {
      this.Errors = new ArrayList();
      this.Warnings = new ArrayList();
   }

   /* Behandlungsmethode für das Validation-Ereignis */
   private void ValidationCallBack(object sender, ValidationEventArgs args)
   {
      // Fehler bzw. Warnung hinzufügen
      if (args.Severity == XmlSeverityType.Error)
         this.Errors.Add(args.Message);
      else
         this.Warnings.Add(args.Message);
   }
    
   /* Private Methode zum Validieren */
   private XmlValidatorResult ValidateXml(XmlTextReader reader, 
      ValidationType validationType, string schemaFileName)
   {
      // Eventuelle alte Fehler löschen 
      this.Errors.Clear();

      // XmlValidatingReader mit dem übergebenen XmlReader erzeugen
      XmlValidatingReader xmlValidator = null;
      try
      {
         xmlValidator = new XmlValidatingReader(reader);
      }
      catch (XmlException ex)
      {
         throw new XmlException("Fehler beim Einlesen der XML-Datei: " +
            ex.Message, ex); 
      }

      // Validier-Typ festlegen
      xmlValidator.ValidationType = validationType;

      // Delegate mit der Methode für das Validation-Ereignis übergeben
      xmlValidator.ValidationEventHandler += 
         new ValidationEventHandler(this.ValidationCallBack);

      // Das externe Schema hinzufügen, wenn ein Dateiname angegeben wurde
      if (schemaFileName != null)
      {
         try
         {
            xmlValidator.Schemas.Add(null, schemaFileName);
         }
         catch (XmlException ex)
         {
            throw new XmlException("Fehler beim Hinzufügen des externen " +
               "Schemas: " + ex.Message, ex); 
         }
      }

      // Daten einlesen und validieren
      try
      {
         while (xmlValidator.Read())
         {
         }
      }
      catch (Exception ex)
      {
         this.Errors.Add(ex.Message);
      }

      // Ergebnis zurückgeben
      if (this.Errors.Count == 0 && this.Warnings.Count == 0)
         return XmlValidatorResult.Valid;
      else if (this.Errors.Count == 0)
         return XmlValidatorResult.WarningsExists;
      else 
         return XmlValidatorResult.ErrorsExists;

   }
   
   /* Methode zum Validieren einer XML-Datei */
   public XmlValidatorResult ValidateXmlFile(string xmlFileName, 
      ValidationType validationType, string schemaFileName)
   {
      // XmlTextReader erzeugen und damit ValidateXml aufrufen
      return ValidateXml(new XmlTextReader(xmlFileName), validationType, schemaFileName);
   }

   /* Methode zum Validieren eines XML-Dokuments */
   public XmlValidatorResult ValidateXmlDocument(XmlDocument xmlDoc, 
      ValidationType validationType, string schemaFileName)
   {
      // MemoryStream aus dem Xml-Dokument erzeugen
      MemoryStream xmlStream = new MemoryStream();
      xmlDoc.Save(xmlStream);
      xmlStream.Seek(0, SeekOrigin.Begin);

      // Mit dem MemoryStream eine XmlTextReader-Instanz erzeugen
      XmlTextReader xmlTextReader = new XmlTextReader(xmlStream);
      xmlStream.Seek(0, SeekOrigin.Begin);

      return ValidateXml(xmlTextReader, validationType, schemaFileName);
   }
}

